#+title: Emacs configuration 2021
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Startup

#+begin_src emacs-lisp
  ;;This init.el file was generated from config.org file 

  (server-start)
  (setq inhibit-startup-message t)
#+end_src

* Basic UI

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

* Fonts and coding

#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)

  (set-face-attribute 'default nil :font "Source Code Pro" :height 120)

  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 140 :weight 'regular)
#+end_src

* Package handling

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; initialize use-package on Non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

  (use-package doom-modeline
    :after eshell
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

* No littering

#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src

* Useful stuff

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package command-log-mode)
#+end_src

* Auto-revert

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)

  (global-auto-revert-mode 1)
#+end_src

* Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.1))
#+end_src

* Tramp

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

* Evil-mode

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

* Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (define-key dired-mode-map [remap dired-find-file] 'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory] 'dired-single-up-directory))

  (use-package dired-single
    :ensure t
    :defer t)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Org-mode & Org-Roam
** Org

#+begin_src emacs-lisp
  (defun org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :defer t
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2)

    (setq org-modules
      '(org-crypt
          org-habit
          org-bookmark
          org-eshell
          org-irc)))

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  (require 'org-indent)

  (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'medium :height (cdr face)))

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)

  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Org/")
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'default))

    ;; (org-roam-capture-templates
    ;;   '(("d" "default" plain
    ;;      #'org-roam-capture--get-point
    ;;      "%?"
    ;;      :file-name "%<%Y%m%d%H%M%S>-${slug}"
    ;;      :head "#+title: ${title}\n"
    ;;      :unnarrowed t)
    ;;     ("ll" "link note" plain
    ;;      #'org-roam-capture--get-point
    ;;      "* %^{Link}"
    ;;      :file-name "Inbox"
    ;;      :olp ("Links")
    ;;      :unnarrowed t
    ;;      :immediate-finish)
    ;;     ("lt" "link task" entry
    ;;      #'org-roam-capture--get-point
    ;;      "* TODO %^{Link}"
    ;;      :file-name "Inbox"
    ;;      :olp ("Tasks")
    ;;      :unnarrowed t
    ;;      :immediate-finish))))
#+end_src

** Presentation

#+begin_src emacs-lisp

#+end_src

** Structure templates

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

** Auto-tangle config

#+begin_src emacs-lisp
  (defun tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tangle-config)))
#+end_src

* LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :init (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-ui-doc-enable nil))

  (use-package lsp-treemacs
    :after lsp)
#+end_src

* Language modes

#+begin_src emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode) .
           (lambda () (require 'ccls) (lsp))))

  (use-package csharp-mode
    :ensure t
    :init
    (defun csharp-mode-setup ()
      (setq-local lsp-auto-guess-root t)
      (lsp))
    (add-hook 'csharp-mode-hook #'csharp-mode-setup))

  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (lsp))))
#+end_src

* Company

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind ((:map company-active-map
                ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
                 ("<tab>" . company-indent-or-complete-common)))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5))
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src

* Shells

#+begin_src emacs-lisp
  (defun configure-eshell ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

* General key bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer custom-keys
      :keymaps '(normal visual emacs dired)
      :prefix "SPC"
      :global-prefix "SPC")
  
    (custom-keys
      "k"  '(kill-buffer :which-key "select and kill buffer")
      "q"  '(kill-buffer-and-window :which-key "kill current buffer and window")
      "."  '(switch-to-buffer :which-key "switch to buffer")
      "d" '(dired :which-key "dired") 
    
      "e"  '(:ignore e :which-key "evaluate")
      "eb" '(eval-buffer :which-key "evaluate current buffer")
      "ee" '(eval-expression :which-key "evaluate expression")
      "er" '(eval-region :which-key "evaluate region")

      "f"  '(:ignore f :which-key "file")
      "ff" '(counsel-find-file :which-key "find file")
      "fo" '(find-file-other-window :which-key "open file in new window")
      "fr" '(counsel-recentf :which-key "find from recent files")

      "g"  '(magit-status :which-key "magit-status")

      "o"  '(:ignore o :which-key "org")
      "oc" '(org-capture :which-key "capture")
      "oa" '(org-agenda :which-key "agenda")
      "os" '(org-schedule :which-key "schedule")
      "od" '(org-deadline :which-key "set deadline")
      "ot" '(org-time-stamp :which-key "set time stamp")

      "p"  '(projectile-command-map :which-key "projectile")
      "pg"  '(counsel-projectile-grep :which-key "counsel-projectile-grep")

      "s"  '(eshell :which-key "eshell")

      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")

      "w"  '(:ignore w :which-key "window")
      "TAB"'(other-window :which-key "switch window")
      "wd" '(delete-window :which-key "delete window")
      "wo" '(delete-other-windows :which-key "delete other windows")
      "wb" '(split-window-below :which-key "split window below")
      "wr" '(split-window-right :which-key "split window right")
      "wl" '(split-window-left :which-key "split window left")))
#+end_src
    
* Custom set variables

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(lsp-treemacs lsp-python-ms pyls dired-hide-dotfiles dired-open all-the-icons-dired dired-single eshell-git-prompt evil-nerd-commenter company flycheck ccls lsp-ui lsp-mode visual-fill-column org-bullets evil-magit magit counsel-projectile projectile general evil-collection evil which-key use-package rainbow-delimiters ivy-rich helpful doom-themes doom-modeline counsel command-log-mode)))
  (custom-set-faces)
 #+end_src

test
